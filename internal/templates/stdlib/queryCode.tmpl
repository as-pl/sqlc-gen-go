{{define "queryCodeStd"}}
{{range .GoQueries}}
{{if $.OutputQuery .SourceName}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}

{{if .Arg.EmitStruct}}
type {{.Arg.Type}} struct { {{- range .Arg.UniqueFields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}




{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) ({{.Ret.DefineType}}, error) {
    {{- template "queryCodeStdExec" . }}
	{{- if or (ne .Arg.Pair .Ret.Pair) (ne .Arg.DefineType .Ret.DefineType) }}
	var {{.Ret.Name}} {{.Ret.Type}}
	{{- end}}
	err := row.Scan({{.Ret.Scan}})
	return {{.Ret.ReturnName}}, err
}
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error) {
    {{- template "queryCodeStdExec" . }}
    if err != nil {
        return nil, err
    }
    defer rows.Close()
    {{- if $.EmitEmptySlices}}
    items := []{{.Ret.DefineType}}{}
    {{else}}
    var items []{{.Ret.DefineType}}
    {{end -}}
    for rows.Next() {
        var {{.Ret.Name}} {{.Ret.Type}}
        if err := rows.Scan({{.Ret.Scan}}); err != nil {
            return nil, err
        }
        items = append(items, {{.Ret.ReturnName}})
    }
    if err := rows.Close(); err != nil {
        return nil, err
    }
    if err := rows.Err(); err != nil {
        return nil, err
    }
    return items, nil
}
{{end}}




{{if eq .IsDynamic true}}
func (q *Queries) {{.MethodName}}Dynamic(ctx context.Context, conditions *goqu.SelectDataset, {{ dbarg }} {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error) {
	rows, err := dynamic.DynamicQueryFromLightAST[ {{if ne .Arg.Name ""}}{{.Arg.Type}}{{else}}struct{}{{end}} , {{.Ret.DefineType}}](
		ctx,
		q.db.(*sql.DB),
		{{.MethodName}}LightAST_Helper,
        {{if ne .Arg.Name ""}}&{{.Arg.Name}}{{else}}&struct{}{}{{end}}, 
		conditions,
	)
	if err != nil {
		return []{{.Ret.DefineType}}{}, err
	}
	return rows, nil
}



var {{.MethodName}}LightAST_Helper = dynamic.QueryLightAST{
    Select: []string{
        {{- range .QueryToCountParts.Select }}
        {{ printf "%q" . }},
        {{- end }}
    },
    From: {{ printf "%q" .QueryToCountParts.From }},
    Joins: map[string]dynamic.JoinPart{
        {{- range $k, $v := .QueryToCountParts.Joins }}
        {{ printf "%q" $k }}: {
            Alias:     {{ printf "%q" $v.Alias }},
            JoinText:  {{ printf "%q" $v.JoinText }},
            DependsOn: {{ printf "%q" $v.DependsOn }},
            Order: {{ printf "%v" $v.Order }},
            Active: true,
            ParamCount: {{ printf "%v" $v.ParamCount }},
        },
        {{- end }}
    },
    Where:      {{ printf "%q" .QueryToCountParts.Where }},
    WhereParamCount: {{ .QueryToCountParts.WhereParamCount }},
    GroupBy:    {{ printf "%q" .QueryToCountParts.GroupBy }},
    GroupByParamCount: {{ .QueryToCountParts.GroupByParamCount }},
    Having:     {{ printf "%q" .QueryToCountParts.Having }},
    HavingParamCount: {{ .QueryToCountParts.HavingParamCount }},
    OrderBy:    {{ printf "%q" .QueryToCountParts.OrderBy }},
    OrderByParamCount: {{ .QueryToCountParts.OrderByParamCount }},
    Limit:      {{ printf "%q" .QueryToCountParts.Limit }},
    LimitParamCount: {{ .QueryToCountParts.LimitParamCount }},
    Offset:     {{ printf "%q" .QueryToCountParts.Offset }},
    OffsetParamCount: {{ .QueryToCountParts.OffsetParamCount }},
    Meta: map[string]string{
        {{- range $k, $v := .QueryToCountParts.Meta }}
        {{ printf "%q" $k }}: {{ printf "%q" $v }},
        {{- end }}
    },
}

func (q *Queries) {{.MethodName}}DynamicCount(ctx context.Context, conditions *goqu.SelectDataset, {{ dbarg }} {{.Arg.Pair}}) (int64, error) {
    conditions = conditions.ClearLimit().ClearOrder().ClearOffset()
	sqlStr, _, _ := conditions.ToSQL()
	

    query := {{.MethodName}}LightAST_Helper.Clone()

    {{- $limitVal := (index .QueryToCountParts.Meta "count-limit") -}}
    {{- if $limitVal }}
        query.Select = []string{"1"}
		conditions = conditions.Limit({{$limitVal}})
    {{- else }}
        query.Select = []string{"count(*) AS count"}
    {{- end }}

	aliases := dynamic.ExtractAliasesFromWhere(sqlStr)
    aliasesFromWhere := dynamic.ExtractAliasesFromWhere("WHERE " + query.Where)
	aliases = append(aliases, aliasesFromWhere...)
	
	query.ActivateUsedJoins(aliases)

    query.Meta["isCountQuery"] = "true"
	r, err := dynamic.DynamicQueryFromLightAST[ {{if ne .Arg.Name ""}}{{.Arg.Type}}{{else}}struct{}{{end}}, int64](
		ctx,
		q.db.(*sql.DB),
		query,
		{{if ne .Arg.Name ""}}&{{.Arg.Name}}{{else}}&struct{}{}{{end}},
		conditions,
	)
	if err != nil || len(r) == 0 {
		return -1, err
	}
	return r[0], nil
}


{{end -}}


{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) error {
    {{- template "queryCodeStdExec" . }}
    return err
}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) (int64, error) {
    {{- template "queryCodeStdExec" . }}
    if err != nil {
        return 0, err
    }
    return result.RowsAffected()
}
{{end}}

{{if eq .Cmd ":execlastid"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) (int64, error) {
    {{- template "queryCodeStdExec" . }}
    if err != nil {
        return 0, err
    }
    return result.LastInsertId()
}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{ dbarg }} {{.Arg.Pair}}) (sql.Result, error) {
    {{- template "queryCodeStdExec" . }}
}
{{end}}

{{end}}
{{end}}
{{end}}

{{define "queryCodeStdExec"}}
    {{- if .Arg.HasSqlcSlices }}
        query := {{.ConstantName}}
        var queryParams []interface{}
        {{- if .Arg.Struct }}
            {{- $arg := .Arg }}
            {{- range .Arg.Struct.Fields }}
                {{- if .HasSqlcSlice }}
                    if len({{$arg.VariableForField .}}) > 0 {
                      for _, v := range {{$arg.VariableForField .}} {
                        queryParams = append(queryParams, v)
                      }
                      query = strings.Replace(query, "/*SLICE:{{.Column.Name}}*/?", strings.Repeat(",?", len({{$arg.VariableForField .}}))[1:], 1)
                    } else {
                      query = strings.Replace(query, "/*SLICE:{{.Column.Name}}*/?", "NULL", 1)
                    }
                {{- else }}
                  queryParams = append(queryParams, {{$arg.VariableForField .}})
                {{- end }}
            {{- end }}
        {{- else }}
            {{- /* Single argument parameter to this goroutine (they are not packed
                in a struct), because .Arg.HasSqlcSlices further up above was true,
                this section is 100% a slice (impossible to get here otherwise).
            */}}
            if len({{.Arg.Name}}) > 0 {
              for _, v := range {{.Arg.Name}} {
                queryParams = append(queryParams, v)
              }
              query = strings.Replace(query, "/*SLICE:{{.Arg.Column.Name}}*/?", strings.Repeat(",?", len({{.Arg.Name}}))[1:], 1)
            } else {
              query = strings.Replace(query, "/*SLICE:{{.Arg.Column.Name}}*/?", "NULL", 1)
            }
        {{- end }}
        {{- if emitPreparedQueries }}
        {{ queryRetval . }} {{ queryMethod . }}(ctx, nil, query, queryParams...)
        {{- else}}
        {{ queryRetval . }} {{ queryMethod . }}(ctx, query, queryParams...)
        {{- end -}}
    {{- else if emitPreparedQueries }}
        {{- queryRetval . }} {{ queryMethod . }}(ctx, q.{{.FieldName}}, {{.ConstantName}}, {{.Arg.Params}})
    {{- else}}
        {{- queryRetval . }} {{ queryMethod . }}(ctx, {{.ConstantName}}, {{.Arg.Params}})
    {{- end -}}
{{end}}
